<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fire_rate = 20;
accuracy = 0;
can_fire = true;
//image_speed = 0;
image_speed = 12 / room_speed;
xp = 0;
controllable = false;
level = 1;
thruster = instance_create(x, y, obj_thruster);
thruster.visible = false;

max_xp = 100;
xp_percentage = xp / 100 * 100;
xp_loss_rate = room_speed / 4;
alarm[1] = xp_loss_rate;
mode = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_game.state = GameState.Dead;
instance_create(x, y, obj_explosion);

audio_sound_gain(snd_player_dead, 0.2, 0);
audio_play_sound(snd_player_dead, 50, false);

destroy(thruster);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xp--;
xp = clamp(xp, 0, 100);
alarm[1] = xp_loss_rate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_fire = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = clamp(x, view_xview + 8, view_wview - 8);
y = clamp(y, view_yview + 8, view_hview - 8);

if (sprite_index == spr_player_vertical_up || sprite_index == spr_player_vertical_down) {
    thruster.x = x - 3;
    thruster.y = y;
}
else {
    thruster.x = x - 8;
    thruster.y = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xp = clamp(xp, 0, 100);
xp_percentage = clamp(xp / 100 * 100, 0, 100);

if (xp_percentage &gt; 66) {
    fire_rate = 3;
    accuracy = 10;
}
else if (xp_percentage &gt; 33) {
    fire_rate = 7;
    accuracy = 5;
}
else {
    fire_rate = 15;
    accuracy = 0;
}

if (sprite_index == spr_player_menu &amp;&amp; obj_game.state == GameState.Game) {
    image_speed = 0;
    image_index = 0;
    thruster.visible = true;
    sprite_index = spr_player;
}

if (controllable) {
    var movement_x = 0;
    var movement_y = 0;
    
    gamepad_set_axis_deadzone(0, 0.25);
    
    if (keyboard_check(ord("W")) || keyboard_check(vk_up)) {
        movement_y--;
    }
    if (keyboard_check(ord("S")) || keyboard_check(vk_down)) {
        movement_y++;
    }
    if (keyboard_check(ord("A")) || keyboard_check(vk_left)) {
        movement_x--;
    }
    if (keyboard_check(ord("D")) || keyboard_check(vk_right)) {
        movement_x++;
    }
    
    var gamepad_h_axis = gamepad_axis_value(0, gp_axislh);
    var gamepad_v_axis = gamepad_axis_value(0, gp_axislv);
    
    // Use gamepad if not using keyboard.
    if (movement_x == 0 &amp;&amp; movement_y == 0) {
        movement_x = gamepad_axis_value(0, gp_axislh);
        movement_y = gamepad_axis_value(0, gp_axislv);
    }
    
    speed = 0;
    
    if (movement_x != 0 || movement_y != 0) {
        speed = 3;
    }

    if (movement_y &gt; 0 &amp;&amp; sprite_index == spr_player) {
        image_index = 1;
    }
    else if (movement_y &lt; 0 &amp;&amp; sprite_index == spr_player) {
        image_index = 2;
    }
    else if (sprite_index == spr_player) {
        image_index = 0;
    }
    
    direction = point_direction(x, y, x + movement_x, y + movement_y);

    if (keyboard_check_pressed(ord("E")) || gamepad_button_check_pressed(0, gp_face3) || gamepad_button_check_pressed(0, gp_face4) || mouse_check_button_pressed(mb_right)) {
        if (mode == 0) {
            mode = 1;
            audio_sound_gain(snd_boost_up, .2, 0);
            audio_play_sound(snd_boost_up, 0, false);
            sprite_index = spr_player_vertical_up;
            image_speed = 6 / room_speed;
            image_index = 0;
        }
        else {
            mode = 0;
            audio_sound_gain(snd_boost_down, .2, 0);
            audio_play_sound(snd_boost_down, 0, false);
            sprite_index = spr_player_vertical_down;
            image_speed = 6 / room_speed;
            image_index = 0;
        }
    }
    
    if (can_fire &amp;&amp; (keyboard_check(vk_space) || mouse_check_button(mb_left) || gamepad_button_check(0, gp_face1) || gamepad_button_check(0, gp_face2))) {
        if (mode == 0) {
            with (instance_create(x + 6, y + 1, obj_projectile)) {
                direction = random_range(-other.accuracy, other.accuracy);
                image_angle = direction;
            }
        }
        else {
            with (instance_create(x, y, obj_projectile)) {
                direction = 90 + random_range(-other.accuracy, other.accuracy);
                image_angle = direction;
            }
            
            with (instance_create(x, y, obj_projectile)) {
                direction = 270 + random_range(-other.accuracy, other.accuracy);
                image_angle = direction;
            }
        }
        
        audio_sound_gain(snd_player_shoot, 0.05, 0);
        audio_play_sound(snd_player_shoot, 50, false);
        can_fire = false;
        alarm[0] = fire_rate;
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_projectile_ufo">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>destroy(other);
destroy(self);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_xp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xp++;
audio_sound_gain(snd_xp_collection, .1, 0);
audio_play_sound(snd_xp_collection, 0, false);
destroy(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>destroy(other);
destroy(self);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == spr_player_vertical_up) {
    image_speed = 0;
    image_index = 2;
}
else if (sprite_index == spr_player_vertical_down) {
    image_speed = 0;
    image_index = 0;
    sprite_index = spr_player;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (obj_game.state == GameState.Game) {
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
    draw_text_colour(view_wview - 2 - 103, 1, "E", c_white, c_white, c_white, c_white, 1);
    
    //draw_rectangle(view_wview - 2 - 102, 1, view_wview - 2, 7, false);
    
    draw_rectangle(view_wview - 2 - 102, 1, view_wview - 2, 1, false);
    draw_rectangle(view_wview - 2 - 102, 1, view_wview - 2 - 102, 7, false);
    draw_rectangle(view_wview - 2 - 102, 7, view_wview - 2, 7, false);
    draw_rectangle(view_wview - 2, 1, view_wview - 2, 7, false);
    //draw_rectangle_colour(view_wview - 2 - 101, 2, view_wview - 3, 6, c_black, c_black, c_black, c_black, false);
    
    if (xp_percentage &gt; 0) {
        var yellow = make_colour_rgb(225, 225, 0);
        draw_rectangle_colour(view_wview - 2 - 101, 2, view_wview - 2 - 101 + xp_percentage, 6, yellow, yellow, yellow, yellow, false);
    }
    
    draw_rectangle_colour(view_wview - 2 - 101 + 33, 2, view_wview - 2 - 101 + 33, 6, c_gray, c_gray, c_gray, c_gray, false);
    draw_rectangle_colour(view_wview - 2 - 101 + 66, 2, view_wview - 2 - 101 + 66, 6, c_gray, c_gray, c_gray, c_gray, false);
    
    /*
    draw_rectangle(12, 1, 12 + 102, 7, false);
    draw_rectangle_colour(13, 2, 13 + 100, 6, c_black, c_black, c_black, c_black, false);
    
    if (xp_percentage &gt; 0) {
        var yellow = make_colour_rgb(225, 225, 0);
        draw_rectangle_colour(13, 2, 13 + xp_percentage, 6, yellow, yellow, yellow, yellow, false);
    }
    
    draw_rectangle_colour(13 + 33, 2, 13 + 33, 6, c_gray, c_gray, c_gray, c_gray, false);
    draw_rectangle_colour(13 + 66, 2, 13 + 66, 6, c_gray, c_gray, c_gray, c_gray, false);
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
