<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_robot01_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-150</depth>
  <persistent>-1</persistent>
  <parentName>obj_character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

show_debug_message("PLAYER CREATED");

damage = 50;
//This variables hold the actual speed the object is travelling at
hspd = 0;
vspd = 0;

//These variables have their respective speeds added to them at each
//step.  The object is moved based on these rounded, but the un-used
//fraction of a pixel is saved for next step, so objects with a
//speed less than 1 will still gradually move.
h_counter = 0;
v_counter = 0;


S_GRAVITY       = 0.3;      //Accel. due to gravity (pixels/step*step)
S_RUN_ACCEL     = 0.8;      //Accel. from running on ground (pixels/step*step)
S_RUN_FRIC      = 0.5;      //Friction on the ground (pixels/step*step)
S_AIR_ACCEL     = 0.4;      //Accel. from running in the air (pixels/step*step)
S_AIR_FRIC      = 0.2;      //Friction in the air (pixels/step*step)
S_JUMP_SPEED    = -6;
S_DJUMP_SPEED   = -4;       //Double jump speed
S_MAX_H         = 4;        //Max horizontal speed
S_MAX_V         = 5;        //Max vertical speed
S_SLOPE_SLOW    = 0.7;      //Decceleration while climbing slopes




// Cleanup these.
smoke_particle_system = part_system_create();
smoke_particle = part_type_create();
smoke_emitter = part_emitter_create(smoke_particle_system);

part_system_depth(smoke_particle_system, 1);

part_type_shape(smoke_particle, pt_shape_smoke);
part_type_scale(smoke_particle, 1, 1);
part_type_size(smoke_particle, 0.10, 0.15, -.001, 0);
part_type_color2(smoke_particle, c_gray, c_gray);
part_type_alpha2(smoke_particle, 1, 0.75);
part_type_speed(smoke_particle, 0.1, 0.5, 0, 0);
part_type_direction(smoke_particle, 0, 359, 0, 0);
part_type_gravity(smoke_particle, 0.02, 90);
part_type_orientation(smoke_particle, 0, 359, 10, 0, true);
part_type_life(smoke_particle, 5, 15);

image_speed = .15;

weapon = instance_create(x, y, obj_weapon);
weapon.owner = self.id;

fire_rate = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (weapon)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (weapon)
{
    x = other.x;
    y = other.y;
    image_angle = point_direction(x, y, mouse_x, mouse_y);
    
    if (image_angle &gt; 90 &amp;&amp; image_angle &lt; 270)
    {
        image_yscale = -1;
    }
    else 
    {
        image_yscale = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
if (keyboard_check(ord('D')))
{
    hspd = spd;
}
else if (keyboard_check(ord('A')))
{
    hspd = -spd;
} 
else
{
    hspd = 0;
}

if (keyboard_check(ord('W')))
{
    vspd = -spd;
}
else if (keyboard_check(ord('S')))
{
    vspd = spd;
} 
else
{
    vspd = 0;
}

if (hspd != 0 || vspd != 0)
{
    sprite_index = spr_robot01_move;
    part_emitter_region(smoke_particle, smoke_emitter, x, x, y + 4, y + 4, 0, 0);
    part_emitter_burst(smoke_particle, smoke_emitter, smoke_particle, 2);
}
else
{
    sprite_index = spr_robot01_idle;
}

if (hspd &gt; 0)
{
    image_xscale = 1;
}
else if (hspd &lt; 0)
{
    image_xscale = -1;
}

h_counter += hspd;
v_counter += vspd;
h = round( h_counter );
v = round( v_counter );
h_counter -= h;
v_counter -= v;

//This loop will move the object based on hspd.  The object will never
//actually collide with a floor object, because this loop (and the next one for vspd) 
//will always position it right next to them without overlapping.  If the
//object collides with a wall, it will call one of two events:
// User Event 0 - if the collision is horizontal
// User Event 1 - if the collision is vertical
collide = false;
repeat(abs(h))
{
    if (place_meeting(x + sign(h), y, obj_obstacle))
    {
        collide = true;
        break;
    }

    x += sign(h);  
}

repeat(abs(v))
{
    if (place_meeting(x, y + sign(v), obj_obstacle))
    {
        collide = true;
        break;
    }
    
    y += sign(v);  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weapon

with (weapon)
{
    x = other.x;
    y = other.y;
    image_angle = point_direction(x, y, mouse_x, mouse_y);
    
    if (image_angle &gt; 90 &amp;&amp; image_angle &lt; 270)
    {
        image_yscale = -1;
    }
    else 
    {
        image_yscale = 1;
    }
}

if (mouse_check_button(mb_left))
{
    fire_weapon(weapon, weapon.image_angle, 1, damage, fire_rate, accuracy);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health

if (hp &lt;= 0)
{
    obj_game.finished = true;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_powerup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.visible)
{
    spd += other.speed_boost;
    damage += other.damage_boost;

    var found = false;

    for (var i = 0; i &lt; ds_list_size(powerups); i++)
    {
        var powerup = powerups[| i];
        var powerup_id = object_get_name(powerup.object_index);
        var other_id = other.object_index;
        
        if (powerup.object_index == other.object_index)
        {
            powerup.count += 1;
            found = true;
        }
    }
    
    if (!found)
    {
        ds_list_add(powerups, other.id);
    }
    
    other.visible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//part_system_destroy(smoke_particle_system);

visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wview, view_hview);

if (visible)
{
    for (var i = 0; i &lt; ds_list_size(powerups); i++)
    {
        var powerup = powerups[| i];
    
        draw_sprite(powerup.sprite_index, 0, 16 * (i + 1), view_hview - 16);
        draw_set_halign(fa_center);
        draw_set_valign(fa_bottom);
        draw_text(16 * (i + 1), view_hview - 24, powerup.count);
    }
    
    draw_set_halign(fa_right);
    draw_set_valign(fa_center);
    draw_text(view_wview - 24, view_hview - 16, hp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
