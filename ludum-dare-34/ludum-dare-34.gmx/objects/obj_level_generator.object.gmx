<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_level_generator</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Prep For Generation

num_floors = 1000;

randomize();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate Floors

var current_x = 0;
var current_y = 0;

while (array_length_1d(tile_get_ids_at_depth(FLOOR_DEPTH)) &lt; num_floors)
{
    if (tile_layer_find(FLOOR_DEPTH, current_x, current_y) == -1)
    {
        if (irandom(7) == 0)
        {
            var decal_choice = choose(TILE_SIZE * 3, TILE_SIZE * 4, TILE_SIZE * 5, TILE_SIZE * 6, TILE_SIZE * 7);
            tile_add(bg_cave, decal_choice, 0, TILE_SIZE, TILE_SIZE, current_x, current_y, FLOOR_DEPTH);
        }
        else
        {
            tile_add(bg_cave, TILE_SIZE * 2, 0, TILE_SIZE, TILE_SIZE, current_x, current_y, FLOOR_DEPTH);
        }
    }
    
    if (tile_layer_find(FLOOR_DEPTH, current_x, current_y - TILE_SIZE) == -1)
    {
        if (irandom(7) == 0)
        {
            var decal_choice = choose(TILE_SIZE * 3, TILE_SIZE * 4, TILE_SIZE * 5, TILE_SIZE * 6, TILE_SIZE * 7);
            tile_add(bg_cave, decal_choice, 0, TILE_SIZE, TILE_SIZE, current_x, current_y - TILE_SIZE, FLOOR_DEPTH);
        }
        else
        {
            tile_add(bg_cave, TILE_SIZE * 2, 0, TILE_SIZE, TILE_SIZE, current_x, current_y - TILE_SIZE, FLOOR_DEPTH);
        }
    }
    
    var dir = irandom(3);
    
    if (dir == 0)
    {
        current_x += TILE_SIZE;
    }
    else if (dir == 1)
    {
        current_x -= TILE_SIZE;
    }
    else if (dir == 2)
    {
        current_y += TILE_SIZE;
    }
    else if (dir == 3)
    {
        current_y -= TILE_SIZE;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate Walls

var floors = tile_get_ids_at_depth(FLOOR_DEPTH);
for (var i = 0; i &lt; array_length_1d(floors); i++)
{
    var floor_position_x = tile_get_x(floors[i]); 
    var floor_position_y = tile_get_y(floors[i]); 

    // Check Top
    var tile_t = tile_layer_find(FLOOR_DEPTH, floor_position_x, floor_position_y - TILE_SIZE);
    // Check Bottom
    var tile_b = tile_layer_find(FLOOR_DEPTH, floor_position_x, floor_position_y + TILE_SIZE);
    // Check Left
    var tile_l = tile_layer_find(FLOOR_DEPTH, floor_position_x - TILE_SIZE, floor_position_y);
    // Check Right
    var tile_r = tile_layer_find(FLOOR_DEPTH, floor_position_x + TILE_SIZE, floor_position_y);
    // Check Top Right
    var tile_tr = tile_layer_find(FLOOR_DEPTH, floor_position_x + TILE_SIZE, floor_position_y - TILE_SIZE);
    // Check Bottom Right
    var tile_br = tile_layer_find(FLOOR_DEPTH, floor_position_x + TILE_SIZE, floor_position_y + TILE_SIZE);
    // Check Top Left
    var tile_tl = tile_layer_find(FLOOR_DEPTH, floor_position_x - TILE_SIZE, floor_position_y - TILE_SIZE);
    // Check Bottom Left
    var tile_bl = tile_layer_find(FLOOR_DEPTH, floor_position_x - TILE_SIZE, floor_position_y + TILE_SIZE);
    
    add_wall(floor_position_x, floor_position_y - TILE_SIZE, tile_t);
    add_wall(floor_position_x, floor_position_y + TILE_SIZE, tile_b);
    add_wall(floor_position_x - TILE_SIZE, floor_position_y, tile_l);
    add_wall(floor_position_x + TILE_SIZE, floor_position_y, tile_r);
    add_wall(floor_position_x + TILE_SIZE, floor_position_y - TILE_SIZE, tile_tr);
    add_wall(floor_position_x + TILE_SIZE, floor_position_y + TILE_SIZE, tile_br);
    add_wall(floor_position_x - TILE_SIZE, floor_position_y - TILE_SIZE, tile_tl);
    add_wall(floor_position_x - TILE_SIZE, floor_position_y + TILE_SIZE, tile_bl);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate Wall Tops

var walls = tile_get_ids_at_depth(WALL_DEPTH);
for (var i = 0; i &lt; array_length_1d(walls); i++)
{
    var wall_position_x = tile_get_x(walls[i]);
    var wall_position_y = tile_get_y(walls[i]);

    var tile_t = tile_layer_find(FLOOR_DEPTH, wall_position_x, wall_position_y - TILE_SIZE);
    if (tile_t != -1)
    {
        var wall_obj = instance_place(wall_position_x, wall_position_y, obj_wall);
        with(wall_obj) {
            instance_destroy()
        }

        instance_create(wall_position_x, wall_position_y, obj_wall_top);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate Wall Faces

var walls = tile_get_ids_at_depth(WALL_DEPTH);

for (var i = 0; i &lt; array_length_1d(walls); i++)
{
    var wall_position_x = tile_get_x(walls[i]);
    var wall_position_y = tile_get_y(walls[i]);
    var possible_position_x = wall_position_x;
    var possible_position_y = wall_position_y + TILE_SIZE;
    
    var wall = tile_layer_find(WALL_DEPTH, possible_position_x, possible_position_y);
    var fl = tile_layer_find(FLOOR_DEPTH, possible_position_x, possible_position_y + TILE_SIZE);
    var floor_above = tile_layer_find(FLOOR_DEPTH, possible_position_x, possible_position_y - TILE_SIZE);

    if (tile_layer_find(WALL_FACE_DEPTH, possible_position_x, possible_position_y) == -1 &amp;&amp; wall == -1 &amp;&amp; fl != -1)
    {
        tile_add(bg_cave, TILE_SIZE, 0, TILE_SIZE, TILE_SIZE, possible_position_x, possible_position_y, WALL_FACE_DEPTH);
        instance_create(possible_position_x, possible_position_y, obj_wall_face);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate Enemies And Powerups

var floors = tile_get_ids_at_depth(FLOOR_DEPTH);

for (var i = 0; i &lt; array_length_1d(floors); i++)
{
    var flr = floors[i];
    var floor_position_x = tile_get_x(flr);
    var floor_position_y = tile_get_y(flr);
    
    if (tile_layer_find(WALL_FACE_DEPTH, floor_position_x, floor_position_y) == -1 &amp;&amp; irandom(50) == 0)
    {
        if (irandom(1) == 0) {
            instance_create(floor_position_x + TILE_SIZE / 2, floor_position_y + TILE_SIZE / 2, choose(obj_enemy_0, obj_enemy_1, obj_enemy_2));
        }
        else {
            instance_create(floor_position_x + TILE_SIZE / 2, floor_position_y + TILE_SIZE / 2, choose(obj_speed_powerup, obj_damage_powerup));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add Important Objects

instance_create(999999, 99999, obj_game);
instance_create(TILE_SIZE / 2, TILE_SIZE / 2, obj_camera);

if (!instance_exists(obj_player))
{
    var p = instance_create(TILE_SIZE / 2, TILE_SIZE / 2, obj_player);
}
else
{
    with(obj_player)
    {
        x = TILE_SIZE / 2;
        y = TILE_SIZE / 2;
        visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(snd_best_song_ever);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
